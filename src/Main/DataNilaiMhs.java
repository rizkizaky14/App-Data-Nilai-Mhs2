/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Main;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.TableModel;


/**
 *
 * @author rizki
 */
public class DataNilaiMhs extends javax.swing.JFrame {

    /**
     * Creates new form MainForm
     */
    public DataNilaiMhs() {
        initComponents();
        Nim.setText("");
        Nama.setText("");
        buttonGroup1.clearSelection();
        Jurusan.setSelectedIndex(0);
        Biaya.setText("0");
        Semester.setText("");
        nilaiKehadiran.setText("0");
        nilaiTugas.setText("0");
        nilaiUts.setText("0");
        nilaiUas.setText("0");
        nilaiPemrograman.setText("0");
        Grade.setText("");
        txtArea.setText("");
        hasilReg.setText("0");
        hasilUts.setText("0");
        hasilUas.setText("0");
        nilaiPemrograman.setEditable(false);
        Grade.setEditable(false);
        loadDataMhs();
        loadDataNilai();
        editTableMhs.setText("Turn On Edit");
        btn_updateMhs.setEnabled(false);
        btn_hapusMhs.setEnabled(false);
        editTableNilai.setText("Turn On Edit");
        btn_updateNilai.setEnabled(false);
        btn_hapusNilai.setEnabled(false);
        
        //Menonaktifkan button
        tambahData_keTabel.setEnabled(false);
        editData.setEnabled(false);
        pushDatabase.setEnabled(false);
        
        Laki.addItemListener((ItemEvent e) -> {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                tambahData_keTabel.setEnabled(false);
                editData.setEnabled(false);
                pushDatabase.setEnabled(false);
            } else {
                tambahData_keTabel.setEnabled(false);
                editData.setEnabled(false);
                pushDatabase.setEnabled(false);
            }
        });
        
        Jurusan.addItemListener((ItemEvent e) -> {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                tambahData_keTabel.setEnabled(false);
                editData.setEnabled(false);
                pushDatabase.setEnabled(false);
            }
        });
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    static class DatabaseConnection {
        public static Connection connect() throws SQLException {
            String url = "jdbc:mysql://localhost:3306/data_nilai_mhs";
            String user = "root";
            String password = "";

            return DriverManager.getConnection(url, user, password);
        }
    }
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jScrollPane2 = new javax.swing.JScrollPane();
        PanelUtama = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        Grade = new javax.swing.JTextField();
        nilaiPemrograman = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        nilaiUas = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        nilaiUts = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        nilaiTugas = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        nilaiKehadiran = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        Biaya = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        Nama = new javax.swing.JTextField();
        Nim = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        Laki = new javax.swing.JRadioButton();
        Perempuan = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        Jurusan = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        Semester = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtArea = new javax.swing.JTextArea();
        tambahData_keTabel = new javax.swing.JButton();
        pushDatabase = new javax.swing.JButton();
        reset = new javax.swing.JButton();
        editData = new javax.swing.JButton();
        inputData = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        hasilReg = new javax.swing.JTextField();
        hasilUas = new javax.swing.JTextField();
        hasilUts = new javax.swing.JTextField();
        Reg = new javax.swing.JCheckBox();
        Uts = new javax.swing.JCheckBox();
        Uas = new javax.swing.JCheckBox();
        search = new javax.swing.JButton();
        txtSearch = new javax.swing.JTextField();
        panelTableMhs = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableMhs = new javax.swing.JTable();
        btn_hapusMhs = new javax.swing.JButton();
        btn_updateMhs = new javax.swing.JButton();
        editTableMhs = new javax.swing.JToggleButton();
        panelTableNilai = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tableNilai = new javax.swing.JTable();
        btn_hapusNilai = new javax.swing.JButton();
        btn_updateNilai = new javax.swing.JButton();
        editTableNilai = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.CardLayout());

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane2.setPreferredSize(new java.awt.Dimension(770, 1280));

        PanelUtama.setBackground(new java.awt.Color(200, 214, 229));
        PanelUtama.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jPanel1.setBackground(new java.awt.Color(242, 212, 12));
        jPanel1.setPreferredSize(new java.awt.Dimension(880, 400));

        nilaiPemrograman.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nilaiPemrogramanActionPerformed(evt);
            }
        });
        nilaiPemrograman.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nilaiPemrogramanKeyReleased(evt);
            }
        });

        jLabel11.setText("Nilai Pemrograman II");

        jLabel12.setText("Grade");

        nilaiUas.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                nilaiUasFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                nilaiUasFocusLost(evt);
            }
        });
        nilaiUas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nilaiUasActionPerformed(evt);
            }
        });
        nilaiUas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nilaiUasKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                nilaiUasKeyTyped(evt);
            }
        });

        jLabel10.setText("Nilai UAS");

        nilaiUts.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                nilaiUtsFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                nilaiUtsFocusLost(evt);
            }
        });
        nilaiUts.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nilaiUtsKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                nilaiUtsKeyTyped(evt);
            }
        });

        jLabel9.setText("Nilai UTS");

        nilaiTugas.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                nilaiTugasFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                nilaiTugasFocusLost(evt);
            }
        });
        nilaiTugas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nilaiTugasKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                nilaiTugasKeyTyped(evt);
            }
        });

        jLabel8.setText("Nilai Tugas");

        nilaiKehadiran.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                nilaiKehadiranFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                nilaiKehadiranFocusLost(evt);
            }
        });
        nilaiKehadiran.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nilaiKehadiranActionPerformed(evt);
            }
        });
        nilaiKehadiran.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nilaiKehadiranKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nilaiKehadiranKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                nilaiKehadiranKeyTyped(evt);
            }
        });

        jLabel7.setText("Nilai Kehadiran");

        jLabel6.setText("Biaya / bln");

        jLabel3.setText("J. Kelamin");

        jLabel2.setText("Nama");

        Nama.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                NamaKeyTyped(evt);
            }
        });

        Nim.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                NimKeyTyped(evt);
            }
        });

        jLabel1.setText("Nim");

        jPanel4.setBackground(new java.awt.Color(182, 194, 180));

        buttonGroup1.add(Laki);
        Laki.setText("Laki - Laki");
        Laki.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LakiActionPerformed(evt);
            }
        });

        buttonGroup1.add(Perempuan);
        Perempuan.setText("Perempuan");
        Perempuan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PerempuanActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Laki)
                    .addComponent(Perempuan))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Laki)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Perempuan)
                .addContainerGap(11, Short.MAX_VALUE))
        );

        jLabel4.setText("Jurusan");

        Jurusan.setBackground(new java.awt.Color(182, 194, 180));
        Jurusan.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pilih Jurusan", "Teknik Informatika", "Ekonomi", "MIPA" }));
        Jurusan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JurusanActionPerformed(evt);
            }
        });
        Jurusan.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                JurusanPropertyChange(evt);
            }
        });

        jLabel5.setText("Semester");

        Semester.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                SemesterKeyTyped(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel13.setText("Data Nilai Mahasiswa");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel4)
                                        .addComponent(jLabel5))
                                    .addGap(20, 20, 20)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(Semester, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(Jurusan, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(36, 36, 36)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(Biaya, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addGap(50, 50, 50)
                                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(58, 58, 58)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel9)
                                    .addGap(115, 115, 115)
                                    .addComponent(nilaiUts))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel10)
                                    .addGap(113, 113, 113)
                                    .addComponent(nilaiUas))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel12)
                                        .addComponent(jLabel11))
                                    .addGap(50, 50, 50)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(nilaiPemrograman)
                                        .addComponent(Grade, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2)
                                .addComponent(jLabel1))
                            .addGap(20, 20, 20)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(Nim, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(Nama, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel7)
                                .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING))
                            .addGap(82, 82, 82)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(nilaiKehadiran, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(nilaiTugas, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(242, 242, 242)
                        .addComponent(jLabel13)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel13)
                .addGap(39, 39, 39)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(Nim, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(nilaiKehadiran, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(Nama, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(nilaiTugas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(nilaiUts, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(23, 23, 23)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel10)
                                    .addComponent(nilaiUas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(95, 95, 95))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(36, 36, 36)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(Jurusan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Biaya, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11)
                            .addComponent(nilaiPemrograman, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(Semester, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12)
                            .addComponent(Grade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(12, 242, 43));

        txtArea.setColumns(20);
        txtArea.setRows(5);
        txtArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtAreaKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(txtArea);

        tambahData_keTabel.setText("Tambah Data");
        tambahData_keTabel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tambahData_keTabelActionPerformed(evt);
            }
        });

        pushDatabase.setText("Kirim \nDatabase");
        pushDatabase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pushDatabaseActionPerformed(evt);
            }
        });

        reset.setText("Reset Table & Input");
        reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetActionPerformed(evt);
            }
        });

        editData.setText("Edit Data");
        editData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editDataActionPerformed(evt);
            }
        });

        inputData.setText("Input Data");
        inputData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputDataActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(reset)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pushDatabase)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(inputData, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(editData, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(tambahData_keTabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(12, 12, 12))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(inputData)
                        .addGap(18, 18, 18)
                        .addComponent(tambahData_keTabel)
                        .addGap(18, 18, 18)
                        .addComponent(editData)
                        .addGap(18, 18, 18)
                        .addComponent(pushDatabase))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(reset)
                .addContainerGap())
        );

        jPanel3.setBackground(new java.awt.Color(198, 18, 230));

        Reg.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Reg.setText("Reg");
        Reg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegActionPerformed(evt);
            }
        });

        Uts.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Uts.setText("UTS");
        Uts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UtsActionPerformed(evt);
            }
        });

        Uas.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Uas.setText("UAS");
        Uas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UasActionPerformed(evt);
            }
        });

        search.setText("Search Nim");
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Uts)
                            .addComponent(Reg)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(Uas))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(search)))
                .addGap(39, 39, 39)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(hasilUts, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                    .addComponent(hasilReg)
                    .addComponent(hasilUas)
                    .addComponent(txtSearch))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Reg)
                    .addComponent(hasilReg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Uts)
                    .addComponent(hasilUts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Uas)
                    .addComponent(hasilUas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(search)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16))
        );

        panelTableMhs.setBackground(new java.awt.Color(72, 219, 251));
        panelTableMhs.setBorder(javax.swing.BorderFactory.createTitledBorder("Data Mahasiswa"));

        tableMhs.setAutoCreateRowSorter(true);
        tableMhs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "NIM", "Nama", "J.Kelamin", "Jurusan", "Semester", "Nilai Pemrograman II", "Grade", "Total Biaya"
            }
        ));
        tableMhs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMhsMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tableMhs);

        btn_hapusMhs.setText("Hapus");
        btn_hapusMhs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_hapusMhsActionPerformed(evt);
            }
        });

        btn_updateMhs.setText("Update");
        btn_updateMhs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_updateMhsActionPerformed(evt);
            }
        });

        editTableMhs.setText("Edit Table ");
        editTableMhs.setToolTipText("");
        editTableMhs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editTableMhsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelTableMhsLayout = new javax.swing.GroupLayout(panelTableMhs);
        panelTableMhs.setLayout(panelTableMhsLayout);
        panelTableMhsLayout.setHorizontalGroup(
            panelTableMhsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelTableMhsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 734, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(panelTableMhsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btn_hapusMhs, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btn_updateMhs)
                .addGap(28, 28, 28)
                .addComponent(editTableMhs)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelTableMhsLayout.setVerticalGroup(
            panelTableMhsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelTableMhsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelTableMhsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_hapusMhs)
                    .addComponent(btn_updateMhs)
                    .addComponent(editTableMhs))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        panelTableNilai.setBackground(new java.awt.Color(50, 255, 126));
        panelTableNilai.setBorder(javax.swing.BorderFactory.createTitledBorder("Nilai & Kehadiran Mahasiswa"));
        panelTableNilai.setPreferredSize(new java.awt.Dimension(0, 250));

        tableNilai.setAutoCreateRowSorter(true);
        tableNilai.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "NIM", "Nilai Kehadiran", "Nilai Tugas", "nilai UTS", "nilai UAS", "Total Nilai"
            }
        ));
        tableNilai.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableNilaiMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(tableNilai);
        tableNilai.getAccessibleContext().setAccessibleDescription("");

        btn_hapusNilai.setText("Hapus");
        btn_hapusNilai.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_hapusNilaiActionPerformed(evt);
            }
        });

        btn_updateNilai.setText("Update");
        btn_updateNilai.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_updateNilaiActionPerformed(evt);
            }
        });

        editTableNilai.setText("Edit Table\n");
        editTableNilai.setToolTipText("");
        editTableNilai.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editTableNilaiActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelTableNilaiLayout = new javax.swing.GroupLayout(panelTableNilai);
        panelTableNilai.setLayout(panelTableNilaiLayout);
        panelTableNilaiLayout.setHorizontalGroup(
            panelTableNilaiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTableNilaiLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelTableNilaiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 734, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelTableNilaiLayout.createSequentialGroup()
                        .addComponent(btn_hapusNilai, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btn_updateNilai)
                        .addGap(18, 18, 18)
                        .addComponent(editTableNilai))))
        );
        panelTableNilaiLayout.setVerticalGroup(
            panelTableNilaiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelTableNilaiLayout.createSequentialGroup()
                .addContainerGap(17, Short.MAX_VALUE)
                .addGroup(panelTableNilaiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_hapusNilai)
                    .addComponent(btn_updateNilai)
                    .addComponent(editTableNilai))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout PanelUtamaLayout = new javax.swing.GroupLayout(PanelUtama);
        PanelUtama.setLayout(PanelUtamaLayout);
        PanelUtamaLayout.setHorizontalGroup(
            PanelUtamaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelUtamaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelUtamaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(panelTableMhs, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, PanelUtamaLayout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(panelTableNilai, javax.swing.GroupLayout.DEFAULT_SIZE, 750, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 750, Short.MAX_VALUE))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        PanelUtamaLayout.setVerticalGroup(
            PanelUtamaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelUtamaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 369, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PanelUtamaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(panelTableMhs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(panelTableNilai, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(111, Short.MAX_VALUE))
        );

        jScrollPane2.setViewportView(PanelUtama);

        getContentPane().add(jScrollPane2, "card2");

        setSize(new java.awt.Dimension(808, 1212));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    private void loadDataMhs() {
        getAllDataMhs((DefaultTableModel) tableMhs.getModel());
    }
    
    private void loadDataNilai() {
        getAllDataNilai((DefaultTableModel) tableNilai.getModel());
    }
    
    public void getAllDataMhs(DefaultTableModel model) {
    model.setRowCount(0);

    try {
        Connection conn = DatabaseConnection.connect();
        String sql = "SELECT * FROM data_mhs";
        try (PreparedStatement pst = conn.prepareStatement(sql)) {
            ResultSet rs = pst.executeQuery();

            while (rs.next()) {
                    int ID = rs.getInt("ID");
                    int nim = rs.getInt("nim");
                    String nama = rs.getString("nama");
                    String j_kelamin = rs.getString("j_kelamin");
                    String jurusan = rs.getString("jurusan");
                    String semester = rs.getString("semester");
                    String nilai_pemrog2 = rs.getString("nilai_pemrog2");
                    String grade = rs.getString("grade");
                    int totalBiaya = rs.getInt("total_biaya");

                Object[] rowData = {ID, nim, nama, j_kelamin, jurusan, semester, nilai_pemrog2, grade, totalBiaya};
                model.addRow(rowData);
            }
        }
    } catch (SQLException e) {
        Logger.getLogger(Main.DataNilaiMhs.class.getName()).log(Level.SEVERE, null, e);
    }
}
    
    public void getAllDataNilai(DefaultTableModel model) {
    model.setRowCount(0);

    try {
        Connection conn = DatabaseConnection.connect();
        String sql = "SELECT * FROM data_nilai";
        try (PreparedStatement pst = conn.prepareStatement(sql)) {
            ResultSet rs = pst.executeQuery();

            while (rs.next()) {
                    int ID = rs.getInt("ID");
                    int nim = rs.getInt("nim");
                    int NilaiKehadiran = rs.getInt("NilaiKehadiran");
                    int NilaiTugas = rs.getInt("NilaiTugas");
                    int NilaiUts = rs.getInt("NilaiUts");
                    int NilaiUas = rs.getInt("NilaiUas");
                    int NilaiPemrog2 = rs.getInt("NilaiPemrog2");

                Object[] rowData = {ID, nim, NilaiKehadiran, NilaiTugas, NilaiUts, NilaiUas, NilaiPemrog2};
                model.addRow(rowData);
            }
        }
    } catch (SQLException e) {
        Logger.getLogger(Main.DataNilaiMhs.class.getName()).log(Level.SEVERE, null, e);
    }
}
    
    private void PerempuanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PerempuanActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PerempuanActionPerformed

    private void JurusanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JurusanActionPerformed
        // TODO add your handling code here:
        Object selectedItem = Jurusan.getSelectedItem();
        if (selectedItem != null)
        {
            double biaya;
           if(selectedItem == "Teknik Informatika"){
                Biaya.setText("300000");
//                biaya = 0.03 * 2500000;
//                tunjanganJabatan.setText(String.valueOf(tj));
           }else if(selectedItem == "Ekonomi"){
                Biaya.setText("200000");
//                tj = 0.03 * 2100000;
//                tunjanganJabatan.setText(String.valueOf(tj));
           }else if(selectedItem == "MIPA"){
                Biaya.setText("225000");
//                tj = 0.03 * 1800000;
//                tunjanganJabatan.setText(String.valueOf(tj));
           }
        }
    }//GEN-LAST:event_JurusanActionPerformed

    private void JurusanPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_JurusanPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_JurusanPropertyChange

    private void nilaiUasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nilaiUasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nilaiUasActionPerformed

    private void nilaiPemrogramanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nilaiPemrogramanActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nilaiPemrogramanActionPerformed

    private void nilaiPemrogramanKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nilaiPemrogramanKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_nilaiPemrogramanKeyReleased

    private void nilaiUasKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nilaiUasKeyReleased
        // TODO add your handling code here:
        int hadir = Integer.parseInt(nilaiKehadiran.getText());
	int tugas = Integer.parseInt(nilaiTugas.getText());
	int uts = Integer.parseInt(nilaiUts.getText());
	int uas = Integer.parseInt(nilaiUas.getText());
                // Menghitung nilai akhir berdasarkan bobot
        double nilaiAkhir = (0.10 * hadir) + (0.20 * tugas) + (0.30 * uts) + (0.40 * uas);
        nilaiPemrograman.setText(String.valueOf(nilaiAkhir));
        
    try {
        double nilai = Double.parseDouble(nilaiPemrograman.getText());
        if (nilai >= 80) {
            Grade.setText("A");
        } else if (nilai >= 70) {
            Grade.setText("B");
        } else if (nilai >= 60) {
            Grade.setText("C");
        } else if (nilai >= 50) {
            Grade.setText("D");
        } else {
            Grade.setText("E");
        }
    } catch (NumberFormatException e) {
        // Handle error when the input is not a valid double
        Grade.setText("Invalid Input");
    }
    }//GEN-LAST:event_nilaiUasKeyReleased

    private void nilaiKehadiranActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nilaiKehadiranActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nilaiKehadiranActionPerformed

    private void inputDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputDataActionPerformed
        //Menutup Akses table Mhs
        editTableMhs.setSelected(false);
        tableMhs.clearSelection();
        editTableMhs.setText("Turn On Edit");
        btn_updateMhs.setEnabled(false);
        btn_hapusMhs.setEnabled(false);
	//Menutup Akses table Nilai
        editTableNilai.setSelected(false);
        tableNilai.clearSelection();
        editTableNilai.setText("Turn On Edit");
        btn_updateNilai.setEnabled(false);
        btn_hapusNilai.setEnabled(false);
        
        //Mengaktifkan button
        tambahData_keTabel.setEnabled(true);
        editData.setEnabled(true);
        
        String nim = Nim.getText();
        String nama = Nama.getText();
        String gender;
        if (Laki.isSelected()) {
            gender = Laki.getText();
        } else {
            gender = Perempuan.getText();
        }
        String jurusan = Jurusan.getSelectedItem().toString();
        String semester = Semester.getText();
        double nilai = Double.parseDouble(nilaiPemrograman.getText());
        String grade = Grade.getText();
        //Total Biaya
        int biaya = Integer.parseInt(Biaya.getText());
        int reg = Integer.parseInt(hasilReg.getText());
        int uts = Integer.parseInt(hasilUts.getText());
        int uas = Integer.parseInt(hasilUas.getText());
        int totalBiaya = ( biaya + reg + uts + uas );
        
        //Tampilkan seluruh hasil ke dalam txtArea
        txtArea.setText("New ID \nNIM : " + nim + "\n" +
                "Nama: " + nama + "\n" +
                "Jenis Kelamin : " + gender + "\n" +
                "Jurusan : " + jurusan + "\n" +
                "Semester : " + semester + "\n" +
                "Nilai Pemrograman II : " + nilai + "\n" +
                "Grade : " + grade + "\n" +
                "Total Biaya : " + totalBiaya);
    }//GEN-LAST:event_inputDataActionPerformed

    private void btn_hapusMhsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_hapusMhsActionPerformed
        deleteDataMahasiswa();
    }//GEN-LAST:event_btn_hapusMhsActionPerformed
    
    private void deleteDataMahasiswa() {
    int selectedRow = tableMhs.getSelectedRow();
    int confirm = JOptionPane.showConfirmDialog(this,
            "Apakah yakin ingin menghapus data ini ?",
            "Konfirmasi Hapus Data",
            JOptionPane.YES_NO_OPTION);

    if (confirm == JOptionPane.YES_OPTION) {
        String id = tableMhs.getValueAt(selectedRow, 0).toString();
        try {
            Connection conn = DatabaseConnection.connect();
            String sql = "DELETE FROM data_mhs WHERE nim=?";
            try (PreparedStatement pst = conn.prepareStatement(sql)) {
                pst.setString(1, id);

                int rowDeleted = pst.executeUpdate();
                if (rowDeleted > 0) {
                    JOptionPane.showMessageDialog(this, "Data Berhasil Dihapus");
                    loadDataMhs();
                } else {
                    JOptionPane.showMessageDialog(this, "Data Gagal Dihapus");
                }
            }
        } catch (SQLException e) {
            Logger.getLogger(Main.DataNilaiMhs.class.getName()).log(Level.SEVERE, null, e);
        }
    }
}

    private void deleteDataNilai() {
    int selectedRow = tableNilai.getSelectedRow();
    int confirm = JOptionPane.showConfirmDialog(this,
            "Apakah yakin ingin menghapus data ini ?",
            "Konfirmasi Hapus Data", 
            JOptionPane.YES_NO_OPTION);

    if (confirm == JOptionPane.YES_OPTION) {
        String id = tableNilai.getValueAt(selectedRow, 0).toString();
        try {
            Connection conn = DatabaseConnection.connect();
            String sql = "DELETE FROM data_nilai WHERE nim=?";
            try (PreparedStatement pst = conn.prepareStatement(sql)) {
                pst.setString(1, id);

                int rowDeleted = pst.executeUpdate();
                if (rowDeleted > 0) {
                    JOptionPane.showMessageDialog(this, "Data Berhasil Dihapus");
                    loadDataNilai();
                } else {
                    JOptionPane.showMessageDialog(this, "Data Gagal Dihapus");
                }
            }
        } catch (SQLException e) {
            Logger.getLogger(Main.DataNilaiMhs.class.getName()).log(Level.SEVERE, null, e);
        }
    }
}
    
    private String getValueFromLine(String line, String prefix) {
        // Menghilangkan awalan dan memberikan nilai tanpa spasi
        return line.replace(prefix, "").trim();
}

    private void tambahData_keTabelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tambahData_keTabelActionPerformed
        //Menutup akses button Edit Data
        editData.setEnabled(false);
        //Membuka button push database
        pushDatabase.setEnabled(true);
        
        //Reset Table
        DefaultTableModel model = (DefaultTableModel) tableMhs.getModel();
        DefaultTableModel nilaiModel = (DefaultTableModel) tableNilai.getModel();
        while (model.getRowCount() > 0) {
            model.removeRow(0);
        }
        while (nilaiModel.getRowCount() > 0) {
            nilaiModel.removeRow(0);
        }
    
    // Mendapatkan isi dari JTextArea
    String dataTextArea = txtArea.getText();

    // Memisahkan nilai berdasarkan karakter baris baru ("\n")
    String[] dataPerBaris = dataTextArea.split("\n");

    // Mendapatkan nilai satu per satu
    String id = getValueFromLine(dataPerBaris[0], "");
    Long nim = Long.valueOf(getValueFromLine(dataPerBaris[1], "NIM : "));
    String nama = getValueFromLine(dataPerBaris[2], "Nama: ");
    String gender = getValueFromLine(dataPerBaris[3], "Jenis Kelamin : ");
    String jurusan = getValueFromLine(dataPerBaris[4], "Jurusan : ");
    String semester = getValueFromLine(dataPerBaris[5], "Semester : ");
    double nilai = Double.parseDouble(getValueFromLine(dataPerBaris[6], "Nilai Pemrograman II : "));
    String grade = getValueFromLine(dataPerBaris[7], "Grade : ");
    int totalBiaya = Integer.parseInt(getValueFromLine(dataPerBaris[8], "Total Biaya : "));

    // Menambahkan data ke dalam tabel
//    DefaultTableModel model = (DefaultTableModel) tableMhs.getModel();
    model.addRow(new Object[]{id, nim, nama, gender, jurusan, semester, nilai, grade, totalBiaya});
    //====================================================================================================

    // Mendapatkan nilai satu per satu
    Long NIM = Long.valueOf(Nim.getText());
    int NilaiKehadiran = Integer.parseInt(nilaiKehadiran.getText());
    int NilaiTugas = Integer.parseInt(nilaiTugas.getText());
    int NilaiUts = Integer.parseInt(nilaiUts.getText());
    int NilaiUas = Integer.parseInt(nilaiUas.getText());
    Double NilaiTotal = Double.valueOf(nilaiPemrograman.getText());
    
    // Menambahkan data ke dalam tabel
//    DefaultTableModel nilaiModel = (DefaultTableModel) tableNilai.getModel();
    nilaiModel.addRow(new Object[]{id, NIM, NilaiKehadiran, NilaiTugas, NilaiUts, NilaiUas, NilaiTotal});     
    }//GEN-LAST:event_tambahData_keTabelActionPerformed

    private void RegActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegActionPerformed
        if (Reg.isSelected()) {
            hasilReg.setText("100000");
    }else {
         hasilReg.setText("0");
        }
    }//GEN-LAST:event_RegActionPerformed

    private void UtsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UtsActionPerformed
        // TODO add your handling code here:
        if (Uts.isSelected()) {
            hasilUts.setText("300000");
        }else {
            hasilUts.setText("0");
        }
    }//GEN-LAST:event_UtsActionPerformed

    private void UasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UasActionPerformed
        // TODO add your handling code here:
        if (Uas.isSelected()) {
            hasilUas.setText("300000");
        }else {
            hasilUas.setText("0");
        }
    }//GEN-LAST:event_UasActionPerformed

    private void nilaiKehadiranKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nilaiKehadiranKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_nilaiKehadiranKeyPressed

    private void nilaiKehadiranKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nilaiKehadiranKeyTyped
        //Menonaktifkan button
        tambahData_keTabel.setEnabled(false);
        editData.setEnabled(false);
        pushDatabase.setEnabled(false);
    }//GEN-LAST:event_nilaiKehadiranKeyTyped

    private void nilaiKehadiranFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_nilaiKehadiranFocusGained
        String NilaiKehadiran = nilaiKehadiran.getText();
        if (NilaiKehadiran.equals("0")) {
            nilaiKehadiran.setText("");
        }
    }//GEN-LAST:event_nilaiKehadiranFocusGained

    private void nilaiTugasFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_nilaiTugasFocusGained
        String NilaiTugas = nilaiTugas.getText();
        if (NilaiTugas.equals("0")) {
            nilaiTugas.setText("");
        }     
    }//GEN-LAST:event_nilaiTugasFocusGained

    private void nilaiUtsFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_nilaiUtsFocusGained
        String NilaiUts = nilaiUts.getText();
        if (NilaiUts.equals("0")) {
            nilaiUts.setText("");
        }       
    }//GEN-LAST:event_nilaiUtsFocusGained

    private void nilaiUasFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_nilaiUasFocusGained
        String NilaiUas = nilaiUas.getText();
        if (NilaiUas.equals("0")) {
            nilaiUas.setText("");
        }      
    }//GEN-LAST:event_nilaiUasFocusGained

    private void pushDatabaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pushDatabaseActionPerformed
        // Mendapatkan data dari table
        DefaultTableModel model = (DefaultTableModel) tableMhs.getModel();
        // Iterasi melalui setiap baris di tabel nilai mhs
        for (int i = 0; i < model.getRowCount(); i++) {
        //Ambil Niali dari setiap kolom
        long nim = Long.parseLong(tableMhs.getValueAt(i, 1).toString());
        String nama  = (String) tableMhs.getValueAt(i, 2);
        String j_kelamin = (String) tableMhs.getValueAt(i, 3);
        String jurusan = (String) tableMhs.getValueAt(i, 4);
        String semester = (String) tableMhs.getValueAt(i, 5);
        //Ambil nilai pemrog2 dan ubah menjadi String
        double nilai_pemrog2 = (double) tableMhs.getValueAt(i, 6);
        String nilai_pemrog2String = Double.toString(nilai_pemrog2);
        String grade = (String) tableMhs.getValueAt(i, 7);
        Integer totalBiaya = (Integer) tableMhs.getValueAt(i, 8);
//        Integer totalBiaya = Integer.valueOf((String) tableMhs.getValueAt(i, 7));
        // Menyimpan data ke database
        saveToDatabase(nim,nama,j_kelamin,jurusan,semester,nilai_pemrog2String,grade,totalBiaya);
        }
        //=========================================================================================
        // Mendapatkan data dari table
         DefaultTableModel modelNilai = (DefaultTableModel) tableNilai.getModel();
        // Iterasi melalui setiap baris di tabel nilai mhs
        for (int a = 0; a < modelNilai.getRowCount(); a++) {
        //Ambil Niali dari setiap kolom
        Long NIM = (Long) tableNilai.getValueAt(a, 1);
        Integer NilaiKehadiran = (Integer) tableNilai.getValueAt(a, 2);
        Integer NilaiTugas = (Integer) tableNilai.getValueAt(a, 3);
        Integer NilaiUts = (Integer) tableNilai.getValueAt(a, 4);
        Integer NilaiUas = (Integer) tableNilai.getValueAt(a, 5);
        Double NilaiPemrog2 = (Double) tableNilai.getValueAt(a, 6);
       
        saveToDatabaseNilai(NIM,NilaiKehadiran,NilaiTugas,NilaiUts,NilaiUas,NilaiPemrog2);
        }
        
        //Menampilakn semua data Tabel
        loadDataMhs();
        loadDataNilai();
    }//GEN-LAST:event_pushDatabaseActionPerformed
    
     private void saveToDatabase(long nim, String nama,String j_kelamin,String jurusan,String semester,String nilai_pemrog2String,String grade,int totalBiaya) {
        try {
            Connection conn = DatabaseConnection.connect();

            // Query SQL untuk menyimpan data
            String query = "INSERT INTO data_mhs (nim, nama, j_kelamin, jurusan, semester, nilai_pemrog2, grade, total_biaya) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
            PreparedStatement pst = conn.prepareStatement(query);

            // Set parameter
            pst.setLong(1, nim);
            pst.setString(2, nama);
            pst.setString(3, j_kelamin);
            pst.setString(4, jurusan);
            pst.setString(5, semester);
            pst.setString(6, nilai_pemrog2String);
            pst.setString(7, grade);
            pst.setInt(8, totalBiaya);
            // ... Set parameter lain sesuai kebutuhan

            // Eksekusi query
            pst.executeUpdate();
            
            // Tutup koneksi
            conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
     
     private void saveToDatabaseNilai(Long NIM, int NilaiKehadiran, int NilaiTugas,int NilaiUts,int NilaiUas,Double NilaiPemrog2) {
        try {
            Connection conn = DatabaseConnection.connect();

            // Query SQL untuk menyimpan data
            String query = "INSERT INTO data_nilai (NIM, NilaiKehadiran, NilaiTugas, NilaiUts, NilaiUas, NilaiPemrog2) VALUES (?, ?, ?, ?, ?, ?)";
            PreparedStatement pst = conn.prepareStatement(query);

            // Set parameter
            pst.setLong(1, NIM);
            pst.setInt(2, NilaiKehadiran);
            pst.setInt(3, NilaiTugas);
            pst.setInt(4, NilaiUts);
            pst.setInt(5, NilaiUas);
            pst.setDouble(6, NilaiPemrog2);
            // ... Set parameter lain sesuai kebutuhan

            // Eksekusi query
            pst.executeUpdate();
           
            // Tutup koneksi
            conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    
    private void LakiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LakiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LakiActionPerformed

    private void nilaiKehadiranFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_nilaiKehadiranFocusLost
        String NilaiKehadiran = nilaiKehadiran.getText();
        if (NilaiKehadiran.equals("")) {
            nilaiKehadiran.setText("0");
        }
    }//GEN-LAST:event_nilaiKehadiranFocusLost

    private void nilaiTugasFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_nilaiTugasFocusLost
        String NilaiTugas = nilaiTugas.getText();
        if (NilaiTugas.equals("")) {
            nilaiTugas.setText("0");
        }
    }//GEN-LAST:event_nilaiTugasFocusLost

    private void nilaiUtsFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_nilaiUtsFocusLost
        String NilaiUts = nilaiUts.getText();
        if (NilaiUts.equals("")) {
            nilaiUts.setText("0");
        }
    }//GEN-LAST:event_nilaiUtsFocusLost

    private void nilaiUasFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_nilaiUasFocusLost
        String NilaiUas = nilaiUas.getText();
        if (NilaiUas.equals("")) {
            nilaiUas.setText("0");
        }
    }//GEN-LAST:event_nilaiUasFocusLost

    private void nilaiUtsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nilaiUtsKeyReleased
        int hadir = Integer.parseInt(nilaiKehadiran.getText());
	int tugas = Integer.parseInt(nilaiTugas.getText());
	int uts = Integer.parseInt(nilaiUts.getText());
	int uas = Integer.parseInt(nilaiUas.getText());
                // Menghitung nilai akhir berdasarkan bobot
        double nilaiAkhir = (0.10 * hadir) + (0.20 * tugas) + (0.30 * uts) + (0.40 * uas);
        nilaiPemrograman.setText(String.valueOf(nilaiAkhir));
        
    try {
        double nilai = Double.parseDouble(nilaiPemrograman.getText());
        if (nilai >= 80) {
            Grade.setText("A");
        } else if (nilai >= 70) {
            Grade.setText("B");
        } else if (nilai >= 60) {
            Grade.setText("C");
        } else if (nilai >= 50) {
            Grade.setText("D");
        } else {
            Grade.setText("E");
        }
    } catch (NumberFormatException e) {
        // Handle error when the input is not a valid double
        Grade.setText("Invalid Input");
    }
    }//GEN-LAST:event_nilaiUtsKeyReleased

    private void nilaiTugasKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nilaiTugasKeyReleased
        int hadir = Integer.parseInt(nilaiKehadiran.getText());
	int tugas = Integer.parseInt(nilaiTugas.getText());
	int uts = Integer.parseInt(nilaiUts.getText());
	int uas = Integer.parseInt(nilaiUas.getText());
                // Menghitung nilai akhir berdasarkan bobot
        double nilaiAkhir = (0.10 * hadir) + (0.20 * tugas) + (0.30 * uts) + (0.40 * uas);
        nilaiPemrograman.setText(String.valueOf(nilaiAkhir));
        
    try {
        double nilai = Double.parseDouble(nilaiPemrograman.getText());
        if (nilai >= 80) {
            Grade.setText("A");
        } else if (nilai >= 70) {
            Grade.setText("B");
        } else if (nilai >= 60) {
            Grade.setText("C");
        } else if (nilai >= 50) {
            Grade.setText("D");
        } else {
            Grade.setText("E");
        }
    } catch (NumberFormatException e) {
        // Handle error when the input is not a valid double
        Grade.setText("Invalid Input");
    }
    }//GEN-LAST:event_nilaiTugasKeyReleased

    private void nilaiKehadiranKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nilaiKehadiranKeyReleased
        int hadir = Integer.parseInt(nilaiKehadiran.getText());
	int tugas = Integer.parseInt(nilaiTugas.getText());
	int uts = Integer.parseInt(nilaiUts.getText());
	int uas = Integer.parseInt(nilaiUas.getText());
                // Menghitung nilai akhir berdasarkan bobot
        double nilaiAkhir = (0.10 * hadir) + (0.20 * tugas) + (0.30 * uts) + (0.40 * uas);
        nilaiPemrograman.setText(String.valueOf(nilaiAkhir));
        
    try {
        double nilai = Double.parseDouble(nilaiPemrograman.getText());
        if (nilai >= 80) {
            Grade.setText("A");
        } else if (nilai >= 70) {
            Grade.setText("B");
        } else if (nilai >= 60) {
            Grade.setText("C");
        } else if (nilai >= 50) {
            Grade.setText("D");
        } else {
            Grade.setText("E");
        }
    } catch (NumberFormatException e) {
        // Handle error when the input is not a valid double
        Grade.setText("Invalid Input");
    }
    }//GEN-LAST:event_nilaiKehadiranKeyReleased

    private void tableMhsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMhsMouseClicked
        // Mendapatkan baris yang diklik
    int selectedRow = tableMhs.getSelectedRow();

    // Mendapatkan data dari tabel
    String nim = tableMhs.getValueAt(selectedRow, 0).toString();
    String nama = tableMhs.getValueAt(selectedRow, 1).toString();
    String gender = tableMhs.getValueAt(selectedRow, 2).toString();
    String jurusan = tableMhs.getValueAt(selectedRow, 3).toString();
    String semester = tableMhs.getValueAt(selectedRow, 4).toString();
    String nilai = tableMhs.getValueAt(selectedRow, 5).toString();
    String grade = tableMhs.getValueAt(selectedRow, 6).toString();
    String totalBiaya = tableMhs.getValueAt(selectedRow, 7).toString();

    // Menggabungkan data menjadi format yang sesuai
    String dataTextArea = "NIM : " + nim + "\n" +
                          "Nama: " + nama + "\n" +
                          "Jenis Kelamin : " + gender + "\n" +
                          "Jurusan : " + jurusan + "\n" +
                          "Semester : " + semester + "\n" +
                          "Nilai Pemrograman II : " + nilai + "\n" +
                          "Grade : " + grade + "\n" +
                          "Total Biaya : " + totalBiaya;

    // Menetapkan nilai ke JTextArea
    txtArea.setText(dataTextArea);
    
    // Menetapkan nilai ke input
    Nim.setText(nim);
    Nama.setText(nama);
    if (gender.equals("Laki - Laki")) {
        Laki.setSelected(true);
    } else {
        Perempuan.setSelected(true);
    }
    Jurusan.setSelectedItem(jurusan);
    Semester.setText(semester);
    
    //Table Nilai
//    int selectedRow = tableMhs.getSelectedRow();
   
//    String NilaiKehadiran  = tableNilai.getValueAt(selectedRow, 1).toString();
//    String NilaiTugas = tableNilai.getValueAt(selectedRow, 2).toString();
//    String NilaiUts = tableNilai.getValueAt(selectedRow, 3).toString();
//    String NilaiUas = tableNilai.getValueAt(selectedRow, 4).toString();
//    String NilaiPemrograman = tableNilai.getValueAt(selectedRow, 5).toString();
//
//    nilaiKehadiran.setText(NilaiKehadiran); 
//    nilaiUts.setText(NilaiUts);
//    nilaiTugas.setText(NilaiTugas);
//    nilaiUas.setText(NilaiUas);
//    nilaiPemrograman.setText(NilaiPemrograman);
    Grade.setText(grade);
    }//GEN-LAST:event_tableMhsMouseClicked

    private void resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetActionPerformed
        //Reset Table
        DefaultTableModel model = (DefaultTableModel) tableMhs.getModel();
        DefaultTableModel nilaiModel = (DefaultTableModel) tableNilai.getModel();
        while (model.getRowCount() > 0) {
            model.removeRow(0);
        }
        while (nilaiModel.getRowCount() > 0) {
            nilaiModel.removeRow(0);
        }
        
        //Reset Input
        Nim.setText("");
        Nama.setText("");
        buttonGroup1.clearSelection();
        Jurusan.setSelectedIndex(0);
        Biaya.setText("0");
        Semester.setText("");
        nilaiKehadiran.setText("0");
        nilaiTugas.setText("0");
        nilaiUts.setText("0");
        nilaiUas.setText("0");
        nilaiPemrograman.setText("0");
        Grade.setText("");
        txtArea.setText("");
        Reg.setSelected(false);
        Uts.setSelected(false);
        Uas.setSelected(false);
        hasilReg.setText("0");
        hasilUts.setText("0");
        hasilUas.setText("0");
    }//GEN-LAST:event_resetActionPerformed

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
    // Mendapatkan teks dari txtSearch
    String searchText = txtSearch.getText();

    // Mengecek apakah teks kosong atau tidak
    if (searchText.isEmpty()) {
        // Jika teks kosong, lakukan kondisi berikut
        loadDataMhs();
        loadDataNilai();
    } else {
        // Jika teks tidak kosong, lakukan kondisi berikut
        try {
            // Handling code untuk pencarian data di tabel Mhs
            searchAndDisplayData(searchText);
        } catch (SQLException ex) {
            Logger.getLogger(DatabaseConnection.class.getName()).log(Level.SEVERE, null, ex);
        }

        // ===========================================

        try {
            // Handling code untuk pencarian data di tabel Nilai
            searchAndDisplayDataNilai(searchText);
        } catch (SQLException ex) {
            Logger.getLogger(DatabaseConnection.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

}
    private void searchAndDisplayData(String keyword) throws SQLException{
       String searchTerm = keyword.trim();
    DefaultTableModel model = (DefaultTableModel) tableMhs.getModel();

    // Hapus semua baris dari tabel sebelum melakukan pencarian
    while (model.getRowCount() > 0) {
        model.removeRow(0);
    }

    Connection conn = null;  // Deklarasikan di luar try agar bisa diakses di finally

    try {
        conn = DataNilaiMhs.DatabaseConnection.connect();

        // Query SQL untuk melakukan pencarian pada satu tabel
        String query = "SELECT * FROM data_mhs WHERE nim = ?";
        // OR nama = ? OR j_kelamin = ? OR jurusan = ? OR semester = ? OR nilai_pemrog2 = ? OR grade = ? OR total_biaya = ?
        try (PreparedStatement pst = conn.prepareStatement(query)) {

            // Set parameter sesuai tipe data kolom di database
            pst.setInt(1, tryParseInt(searchTerm));  // nim is an INT
//            pst.setString(2, searchTerm);  // nama is a VARCHAR
//            pst.setString(3, searchTerm);  // j_kelamin is a VARCHAR
//            pst.setString(4, searchTerm);  // jurusan is a VARCHAR
//            pst.setString(5, searchTerm);  // semester is a VARCHAR
//            pst.setString(6, searchTerm);  // nilai_pemrog2 is a VARCHAR
//            pst.setString(7, searchTerm);  // grade is a VARCHAR
//            pst.setInt(8, tryParseInt(searchTerm));  // total_biaya is a BIGINT

            try (ResultSet resultSet = pst.executeQuery()) {
                while (resultSet.next()) {
                    int nim = resultSet.getInt("nim");
                    String nama = resultSet.getString("nama");
                    String j_kelamin = resultSet.getString("j_kelamin");
                    String jurusan = resultSet.getString("jurusan");
                    String semester = resultSet.getString("semester");
                    String nilai_pemrog2 = resultSet.getString("nilai_pemrog2");
                    String grade = resultSet.getString("grade");
                    int totalBiaya = resultSet.getInt("total_biaya");

                    // Tambahkan baris ke model tabel
                    model.addRow(new Object[]{nim, nama, j_kelamin, jurusan, semester, nilai_pemrog2, grade, totalBiaya});
                    //
                }
            }
        }
    } catch (SQLException e) {
        e.printStackTrace();
    } finally {
        try {
            if (conn != null) {
                conn.close();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    }

    private void searchAndDisplayDataNilai(String keyword) throws SQLException{
       String searchTerm = keyword.trim();
    DefaultTableModel nilaiModel = (DefaultTableModel) tableNilai.getModel();
    
    // Hapus semua baris dari tabel sebelum melakukan pencarian
    while (nilaiModel.getRowCount() > 0) {
        nilaiModel.removeRow(0);
    }

    Connection conn = null;  // Deklarasikan di luar try agar bisa diakses di finally

    try {
        conn = DataNilaiMhs.DatabaseConnection.connect();

        // Query SQL untuk melakukan pencarian pada satu tabel
        String query = "SELECT * FROM data_nilai WHERE nim = ?";
        try (PreparedStatement pst = conn.prepareStatement(query)) {

            // Set parameter sesuai tipe data kolom di database
            pst.setInt(1, tryParseInt(searchTerm));

            try (ResultSet resultSet = pst.executeQuery()) {
                while (resultSet.next()) {
                    int nim = resultSet.getInt("nim");
                    int NilaiKehadiran = resultSet.getInt("NilaiKehadiran");
                    int NilaiTugas = resultSet.getInt("NilaiTugas");
                    int NilaiUts = resultSet.getInt("NilaiUts");
                    int NilaiUas = resultSet.getInt("NilaiUas");
                    int NilaiPemrog2 = resultSet.getInt("NilaiPemrog2");

                    // Tambahkan baris ke model tabel
                    nilaiModel.addRow(new Object[]{nim, NilaiKehadiran, NilaiTugas, NilaiUts, NilaiUas, NilaiPemrog2});
                }
            }
        }
    } catch (SQLException e) {
        e.printStackTrace();
    } finally {
        try {
            if (conn != null) {
                conn.close();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    }
    
// Helper function to try parsing an integer, return 0 if not successful
private int tryParseInt(String value) {
    try {
        return Integer.parseInt(value);
    } catch (NumberFormatException e) {
        return 0;
    }          
    }//GEN-LAST:event_searchActionPerformed

    private void tableNilaiMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableNilaiMouseClicked
    int selectedRow = tableNilai.getSelectedRow();
    
    String NilaiKehadiran  = tableNilai.getValueAt(selectedRow, 1).toString();
    String NilaiTugas = tableNilai.getValueAt(selectedRow, 2).toString();
    String NilaiUts = tableNilai.getValueAt(selectedRow, 3).toString();
    String NilaiUas = tableNilai.getValueAt(selectedRow, 4).toString();
    String NilaiPemrograman = tableNilai.getValueAt(selectedRow, 5).toString();

    nilaiKehadiran.setText(NilaiKehadiran); 
    nilaiUts.setText(NilaiUts);
    nilaiTugas.setText(NilaiTugas);
    nilaiUas.setText(NilaiUas);
    nilaiPemrograman.setText(NilaiPemrograman);
//    Grade.setText(grade);
    }//GEN-LAST:event_tableNilaiMouseClicked
    
    private void updateDataMhs() {
        // Mendapatkan data dari table
        DefaultTableModel model = (DefaultTableModel) tableMhs.getModel();
        int selectedRow = tableMhs.getSelectedRow();
        //Ambil Niali dari setiap kolom
        Integer nim = (Integer) tableMhs.getValueAt(selectedRow, 0);
        String nama  = (String) tableMhs.getValueAt(selectedRow, 1);
        String j_kelamin = (String) tableMhs.getValueAt(selectedRow, 2);
        String jurusan = (String) tableMhs.getValueAt(selectedRow, 3);
        String semester = (String) tableMhs.getValueAt(selectedRow, 4);
        //Ambil nilai pemrog2 dan ubah menjadi String
        double nilai_pemrog2 = (double) tableMhs.getValueAt(selectedRow, 5);
        String nilai_pemrog2String = Double.toString(nilai_pemrog2);
        String grade = (String) tableMhs.getValueAt(selectedRow, 6);
        Integer totalBiaya = (Integer) tableMhs.getValueAt(selectedRow, 7);
    
        if (nim == null || nama.isEmpty() || j_kelamin.isEmpty() || jurusan.isEmpty() || semester.isEmpty() || Double.isNaN(nilai_pemrog2) || nilai_pemrog2String.isEmpty() || grade.isEmpty() || totalBiaya == null) {
        JOptionPane.showMessageDialog(this, "Semua kolom harus diisi !", "Validasi", JOptionPane.ERROR_MESSAGE);
        return;
        }
        
        try {
            Connection conn = DatabaseConnection.connect();
            String sql = "UPDATE data_mhs SET nama=?,j_kelamin=?,jurusan=?,semester=?,nilai_pemrog2=?,grade=?,total_Biaya=? WHERE nim=?";
            try(PreparedStatement pst = conn.prepareStatement(sql)){
                pst.setString(1, nama);
                pst.setString(2, j_kelamin);
                pst.setString(3, jurusan);
                pst.setString(4, semester);
                pst.setString(5, nilai_pemrog2String);
                pst.setString(6, grade);
                pst.setInt(7, totalBiaya);
                pst.setInt(8, nim);
                
                int rowUpdated = pst.executeUpdate();
                if(rowUpdated > 0){
                    JOptionPane.showMessageDialog(this, "Data Berhasil Diperbarui");
                    //resetForm();
                    loadDataMhs();
                }
            }
        } catch (SQLException e) {
            Logger.getLogger(Main.DataNilaiMhs.class.getName()).log(Level.SEVERE,null,e);
            }
    }
    
    private void btn_updateMhsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_updateMhsActionPerformed
        updateDataMhs();
    }//GEN-LAST:event_btn_updateMhsActionPerformed
    
    private void btn_hapusNilaiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_hapusNilaiActionPerformed
        deleteDataNilai();
    }//GEN-LAST:event_btn_hapusNilaiActionPerformed
    
    private void updateDataNilai() {
        // Mendapatkan data dari table
        DefaultTableModel model = (DefaultTableModel) tableNilai.getModel();
        int selectedRow = tableNilai.getSelectedRow();
        //Ambil Niali dari setiap kolom
        Integer NIM = (Integer) tableNilai.getValueAt(selectedRow, 0);
        Integer NilaiKehadiran = (Integer) tableNilai.getValueAt(selectedRow, 1);
        Integer NilaiTugas = (Integer) tableNilai.getValueAt(selectedRow, 2);
        Integer NilaiUts = (Integer) tableNilai.getValueAt(selectedRow, 3);
        Integer NilaiUas = (Integer) tableNilai.getValueAt(selectedRow, 4);
        Double NilaiPemrog2 = (Double) tableNilai.getValueAt(selectedRow, 5);
    
        if (NIM == null || NilaiKehadiran == null || NilaiTugas == null || NilaiUts == null || NilaiUas == null || Double.isNaN(NilaiPemrog2)) {
        JOptionPane.showMessageDialog(this, "Semua kolom harus diisi !", "Validasi", JOptionPane.ERROR_MESSAGE);
        return;
        }
        
        try {
            Connection conn = DatabaseConnection.connect();
            String sql = "UPDATE data_nilai SET NilaiKehadiran=?,NilaiTugas=?,NilaiUts=?,NilaiUas=?,NilaiPemrog2=? WHERE NIM=?";
            try(PreparedStatement pst = conn.prepareStatement(sql)){
                pst.setInt(1, NilaiKehadiran);
                pst.setInt(2, NilaiTugas);
                pst.setInt(3, NilaiUts);
                pst.setInt(4, NilaiUas);
                pst.setDouble(5, NilaiPemrog2);
                pst.setInt(6, NIM);
                
                int rowUpdated = pst.executeUpdate();
                if(rowUpdated > 0){
                    JOptionPane.showMessageDialog(this, "Data Berhasil Diperbarui");
                    //resetForm();
                    loadDataNilai();
                }
            }
        } catch (SQLException e) {
            Logger.getLogger(Main.DataNilaiMhs.class.getName()).log(Level.SEVERE,null,e);
            }
    }
    
    private void btn_updateNilaiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_updateNilaiActionPerformed
        updateDataNilai();
    }//GEN-LAST:event_btn_updateNilaiActionPerformed

    private void editDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editDataActionPerformed
    //=========================== Table Mhs  ===========================================================================
        int row = tableMhs.getSelectedRow();
        
        // Mendapatkan isi dari JTextArea
    String dataTextArea = txtArea.getText();

    // Memisahkan nilai berdasarkan karakter baris baru ("\n")
    String[] dataPerBaris = dataTextArea.split("\n");

    // Mendapatkan nilai satu per satu
    Integer nim = Integer.valueOf(getValueFromLine(dataPerBaris[0], "NIM : "));
    String nama = getValueFromLine(dataPerBaris[1], "Nama: ");
    String gender = getValueFromLine(dataPerBaris[2], "Jenis Kelamin : ");
    String jurusan = getValueFromLine(dataPerBaris[3], "Jurusan : ");
    String semester = getValueFromLine(dataPerBaris[4], "Semester : ");
    double nilai = Double.parseDouble(getValueFromLine(dataPerBaris[5], "Nilai Pemrograman II : "));
    String grade = getValueFromLine(dataPerBaris[6], "Grade : ");
    int totalBiaya = Integer.parseInt(getValueFromLine(dataPerBaris[7], "Total Biaya : "));
        
        DefaultTableModel dataModel = (DefaultTableModel) tableMhs.getModel();
        dataModel.setValueAt(nim, row, 0);
        dataModel.setValueAt(nama, row, 1);
        dataModel.setValueAt(gender, row, 2);
        dataModel.setValueAt(jurusan, row, 3);
        dataModel.setValueAt(semester, row, 4);
        dataModel.setValueAt(nilai, row, 5);
        dataModel.setValueAt(grade, row, 6);
        dataModel.setValueAt(totalBiaya, row, 7);
        
        //============================= Table Nilai =============================================================
        tableNilaiEdit();
    }//GEN-LAST:event_editDataActionPerformed

    private void editTableMhsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editTableMhsActionPerformed
        if (editTableMhs.isSelected()) {
        // Kode yang dijalankan saat tombol toggle diaktifkan
        editTableMhs.setText("Turn Off Edit");
        tableNilai.clearSelection();
        btn_updateMhs.setEnabled(true);
        btn_hapusMhs.setEnabled(true);
        //untuk menutup akses Table Nilai
        editTableNilai.setSelected(false);
        editTableNilai.setText("Turn On Edit");
        btn_updateNilai.setEnabled(false);
        btn_hapusNilai.setEnabled(false);
    } else {
        // Kode yang dijalankan saat tombol toggle dimatikan
        editTableMhs.setText("Turn On Edit");
        btn_updateMhs.setEnabled(false);
        btn_hapusMhs.setEnabled(false);
        }
    }//GEN-LAST:event_editTableMhsActionPerformed

    private void editTableNilaiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editTableNilaiActionPerformed
        if (editTableNilai.isSelected()) {
        // Kode yang dijalankan saat tombol toggle diaktifkan
        editTableNilai.setText("Turn Off Edit");
        tableMhs.clearSelection();
        btn_updateNilai.setEnabled(true);
        btn_hapusNilai.setEnabled(true);
        // Menutup akses table Mhs
        editTableMhs.setSelected(false);
        editTableMhs.setText("Turn On Edit");
        btn_updateMhs.setEnabled(false);
        btn_hapusMhs.setEnabled(false);
    } else {
        // Kode yang dijalankan saat tombol toggle dimatikan
        editTableNilai.setText("Turn On Edit");
        btn_updateNilai.setEnabled(false);
        btn_hapusNilai.setEnabled(false);
        }
    }//GEN-LAST:event_editTableNilaiActionPerformed

    private void nilaiTugasKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nilaiTugasKeyTyped
        //Menonaktifkan button
        tambahData_keTabel.setEnabled(false);
        editData.setEnabled(false);
        pushDatabase.setEnabled(false);
    }//GEN-LAST:event_nilaiTugasKeyTyped

    private void nilaiUtsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nilaiUtsKeyTyped
        //Menonaktifkan button
        tambahData_keTabel.setEnabled(false);
        editData.setEnabled(false);
        pushDatabase.setEnabled(false);
    }//GEN-LAST:event_nilaiUtsKeyTyped

    private void nilaiUasKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nilaiUasKeyTyped
        //Menonaktifkan button
        tambahData_keTabel.setEnabled(false);
        editData.setEnabled(false);
        pushDatabase.setEnabled(false);
    }//GEN-LAST:event_nilaiUasKeyTyped

    private void NimKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_NimKeyTyped
        //Menonaktifkan button
        tambahData_keTabel.setEnabled(false);
        editData.setEnabled(false);
        pushDatabase.setEnabled(false);
    }//GEN-LAST:event_NimKeyTyped

    private void NamaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_NamaKeyTyped
        //Menonaktifkan button
        tambahData_keTabel.setEnabled(false);
        editData.setEnabled(false);
        pushDatabase.setEnabled(false);
    }//GEN-LAST:event_NamaKeyTyped

    private void SemesterKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SemesterKeyTyped
        //Menonaktifkan button
        tambahData_keTabel.setEnabled(false);
        editData.setEnabled(false);
        pushDatabase.setEnabled(false);
    }//GEN-LAST:event_SemesterKeyTyped

    private void txtAreaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAreaKeyTyped
        //Menonaktifkan button
        tambahData_keTabel.setEnabled(false);
        editData.setEnabled(false);
        pushDatabase.setEnabled(false);
    }//GEN-LAST:event_txtAreaKeyTyped
    
     private void tableNilaiEdit() {
         int row = tableNilai.getSelectedRow();  

    // Mendapatkan nilai satu per satu
    int NIM = Integer.parseInt(Nim.getText());
    int NilaiKehadiran = Integer.parseInt(nilaiKehadiran.getText());
    int NilaiTugas = Integer.parseInt(nilaiTugas.getText());
    int NilaiUts = Integer.parseInt(nilaiUts.getText());
    int NilaiUas = Integer.parseInt(nilaiUas.getText());
    Double NilaiTotal = Double.valueOf(nilaiPemrograman.getText());
        
        DefaultTableModel dataModel = (DefaultTableModel) tableNilai.getModel();
        dataModel.setValueAt(NIM, row, 0);
        dataModel.setValueAt(NilaiKehadiran, row, 1);
        dataModel.setValueAt(NilaiTugas, row, 2);
        dataModel.setValueAt(NilaiUts, row, 3);
        dataModel.setValueAt(NilaiUas, row, 4);
        dataModel.setValueAt(NilaiTotal, row, 5);
     }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DataNilaiMhs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DataNilaiMhs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DataNilaiMhs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DataNilaiMhs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DataNilaiMhs().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Biaya;
    private javax.swing.JTextField Grade;
    private javax.swing.JComboBox<String> Jurusan;
    private javax.swing.JRadioButton Laki;
    private javax.swing.JTextField Nama;
    private javax.swing.JTextField Nim;
    private javax.swing.JPanel PanelUtama;
    private javax.swing.JRadioButton Perempuan;
    private javax.swing.JCheckBox Reg;
    private javax.swing.JTextField Semester;
    private javax.swing.JCheckBox Uas;
    private javax.swing.JCheckBox Uts;
    private javax.swing.JButton btn_hapusMhs;
    private javax.swing.JButton btn_hapusNilai;
    private javax.swing.JButton btn_updateMhs;
    private javax.swing.JButton btn_updateNilai;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton editData;
    private javax.swing.JToggleButton editTableMhs;
    private javax.swing.JToggleButton editTableNilai;
    private javax.swing.JTextField hasilReg;
    private javax.swing.JTextField hasilUas;
    private javax.swing.JTextField hasilUts;
    private javax.swing.JButton inputData;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField nilaiKehadiran;
    private javax.swing.JTextField nilaiPemrograman;
    private javax.swing.JTextField nilaiTugas;
    private javax.swing.JTextField nilaiUas;
    private javax.swing.JTextField nilaiUts;
    private javax.swing.JPanel panelTableMhs;
    private javax.swing.JPanel panelTableNilai;
    private javax.swing.JButton pushDatabase;
    private javax.swing.JButton reset;
    private javax.swing.JButton search;
    private javax.swing.JTable tableMhs;
    private javax.swing.JTable tableNilai;
    private javax.swing.JButton tambahData_keTabel;
    private javax.swing.JTextArea txtArea;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
